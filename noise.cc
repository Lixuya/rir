/*
Noise generator

Copyright 2020 Ahmet Inan <inan@aicodix.de>
*/

#include <iostream>
#include <cmath>
#include "complex.hh"
#include "wav.hh"
#include "mls.hh"

int poly14[] = {
	0b100000000101011,
	0b100000001010011,
	0b100000001011111,
	0b100000001111011,
	0b100000010101001,
	0b100000010101111,
	0b100000010111011,
	0b100000010111101,
	0b100000011001111,
	0b100000011101011,
	0b100000011110011,
	0b100000100001101,
	0b100000100010011,
	0b100000100111011,
	0b100000101000011,
	0b100000110011011,
	0b100000110011101,
	0b100000110100111,
	0b100000110110101,
	0b100000111010101,
	0b100000111011001,
	0b100000111110001,
	0b100010001000011,
	0b100011011011011,
	0b100100001000011,
	0b100101001100101,
	0b101001111110001,
	0b101101111101011,
	0b101111010011001,
	0b110000001101011,
	0b110010110111111,
	0b110100001110111,
	0b110100100101111,
	0b111110011000011,
	0b111111001100001,
};

int poly16[] = {
	0b10000000000101101,
	0b10000000000111001,
	0b10000000000111111,
	0b10000000001010011,
	0b10000000011010111,
	0b10000000100101111,
	0b10000000100111101,
	0b10000000101001111,
	0b10000000110010111,
	0b10000000110100001,
	0b10000000110101101,
	0b10000000110111111,
	0b10000000111000111,
	0b10000001000010101,
	0b10000001000011001,
	0b10000001000100101,
	0b10000001000101111,
	0b10000001001011101,
	0b10000001001101101,
	0b10000001010000101,
	0b10000001010010001,
	0b10000001010100001,
	0b10000001111011101,
	0b10001000000001011,
	0b10011110001000111,
	0b10100010100001011,
	0b10111000001101101,
	0b11000101110110111,
	0b11000110011101111,
	0b11000111001000111,
	0b11000111101010111,
};

int poly18[] = {
	0b1000000000000100111,
	0b1000000000001001101,
	0b1000000000001111011,
	0b1000000000010000001,
	0b1000000000011011011,
	0b1000000000011101101,
	0b1000000000100000111,
	0b1000000001011110001,
	0b1000000001101110111,
	0b1000000010010100001,
	0b1000000010100100001,
	0b1000000010111111111,
	0b1000000011000001001,
	0b1000010000001010001,
	0b1001000000000100101,
	0b1001000001000000101,
	0b1001001010100000101,
	0b1001011101100001111,
	0b1001101011010101101,
	0b1010001010101010011,
	0b1010010010010010001,
	0b1010101000111010001,
	0b1011000111010110011,
	0b1011110000110101101,
	0b1100001111010100111,
	0b1100110011101101001,
	0b1101011111111001111,
	0b1101110100110010011,
	0b1101111010001001011,
	0b1110101001101000111,
	0b1110110111100000011,
	0b1111100000111000111,
};

int poly20[] = {
	0b100000000000000001001,
	0b100000000000001010011,
	0b100000000000001101001,
	0b100000000000001111011,
	0b100000000000011110011,
	0b100000000000101100111,
	0b100000000000101101101,
	0b100000000000101111111,
	0b100000000000110001111,
	0b100000000000110111111,
	0b100000000001000100011,
	0b100000000001000101001,
	0b100000001011011110001,
	0b100000100011101110001,
	0b100001011000001100001,
	0b100001100001010111111,
	0b100011110110100111101,
	0b100100000101001000101,
	0b100100100010010011101,
	0b100101110011110011101,
	0b100111000111011010001,
	0b100111010101000100001,
	0b100111111001001011101,
	0b101000001001100000101,
	0b101000101000010011011,
	0b101001001001110111001,
	0b101100001010010111101,
	0b101111010011110000001,
	0b110000000000000011001,
	0b110000101111100011111,
	0b110011100101110101101,
	0b110100000100111010001,
	0b110110011010011111001,
	0b110111110101011110101,
	0b111000001100000110101,
	0b111110100110000100101,
};

int main(int argc, char **argv)
{
	if (argc != 7) {
		std::cerr << "usage: " << argv[0] << " OUTPUT FILTER RATE BITS LENGTH COUNT" << std::endl;
		return 1;
	}

	const char *output_name = argv[1];
	const char *filter_name = argv[2];
	int rate = std::atoi(argv[3]);
	int bits = std::atoi(argv[4]);
	int length = std::atoi(argv[5]);
	int count = std::atoi(argv[6]);

	int *poly = 0;
	int poly_count = 0;
	switch (length) {
	case 16384:
		poly = poly14;
		poly_count = sizeof(poly14) / sizeof(*poly14);
		break;
	case 65536:
		poly = poly16;
		poly_count = sizeof(poly16) / sizeof(*poly16);
		break;
	case 262144:
		poly = poly18;
		poly_count = sizeof(poly18) / sizeof(*poly18);
		break;
	case 1048576:
		poly = poly20;
		poly_count = sizeof(poly20) / sizeof(*poly20);
		break;
	default:
		std::cerr << "Unsupported filter length." << std::endl;
		return 1;
	}

	if (poly_count < count) {
		std::cerr << "Only " << poly_count << " sequences available for this filter length." << std::endl;
		return 1;
	}

	typedef float value;

	value *filter = new value[length*count];
	for (int j = 0; j < count; ++j) {
		CODE::MLS noise(poly[j]);
		for (int i = 0; i < length; ++i)
			filter[count*i+j] = 1 - 2 * noise();
	}
	DSP::WriteWAV<value> filter_file(filter_name, rate, bits, count);
	filter_file.write(filter, length);

	value *output = new value[length];
	DSP::WriteWAV<value> output_file(output_name, rate, bits, 1);
	for (int j = 0; j < count; ++j) {
		for (int i = 0; i < length; ++i)
			output[i] = filter[count*i+j];
		for (int i = 0; i < 2; ++i)
			output_file.write(output, length);
	}

	return 0;
}

